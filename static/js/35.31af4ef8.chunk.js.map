{"version":3,"file":"static/js/35.31af4ef8.chunk.js","mappings":"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","sources":["components/UpcomingMovie/UpcomingMovie.jsx","components/WeeklyTrends/WeeklyTrends.jsx","pages/Home/Home.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  StyledUpcomingContentBtn,\n  StyledUpcomingContentText,\n  StyledUpcomingContentTitle,\n  StyledUpcomingContentWrap,\n  StyledUpcomingFilm,\n  StyledUpcomingImage,\n  StyledUpcomingListItem,\n  StyledUpcomingListLeft,\n  StyledUpcomingListText,\n  StyledUpcomingName,\n  StyledUpcomingThumb,\n  StyledUpcomingTitle,\n} from './UpcomingMovie.styled';\nimport { StyledHeroContainer } from 'components/Hero/Hero.styled';\n\nimport { Loader } from 'components/Loader/Loader';\n\nimport {\n  fetctUpcomingMovies,\n  removeFromFavoriteMovies,\n  setFavoriteMovies,\n} from 'redux/Movies/slice';\nimport { selectFavoriteMovies, selectLoadingStatus, selectUpcomingMovie } from 'redux/selectors';\n\nexport const UpcomingMovie = () => {\n  const isLoading = useSelector(selectLoadingStatus);\n  const upcomingMovie = useSelector(selectUpcomingMovie);\n  const favoriteMovies = useSelector(selectFavoriteMovies);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetctUpcomingMovies());\n  }, [dispatch]);\n\n  const imagePath = 'https://image.tmdb.org/t/p/original/';\n  const isInLibrary =\n    favoriteMovies &&\n    upcomingMovie &&\n    favoriteMovies.some(favoriteMovie => favoriteMovie.id === upcomingMovie.id);\n\n  const addToLibrary = data => {\n    dispatch(setFavoriteMovies(data));\n  };\n\n  const removeFromLibrary = id => {\n    dispatch(removeFromFavoriteMovies(id));\n  };\n\n  const handleClick = e => {\n    e.preventDefault();\n    addToLibrary(upcomingMovie);\n  };\n\n  const handleDelete = e => {\n    e.preventDefault();\n    removeFromLibrary(upcomingMovie.id);\n  };\n\n  return (\n    <section>\n      <StyledHeroContainer>\n        {isLoading && <Loader />}\n        {upcomingMovie && (\n          <>\n            <StyledUpcomingTitle>UPCOMING THIS MONTH</StyledUpcomingTitle>\n            <StyledUpcomingFilm>\n              <StyledUpcomingImage>\n                <source\n                  srcSet={imagePath + upcomingMovie.backdrop_path}\n                  media=\"(min-width: 768px)\"\n                  loading=\"lazy\"\n                />\n                <source\n                  srcSet={imagePath + upcomingMovie.poster_path}\n                  media=\"(min-width: 320px)\"\n                  loading=\"lazy\"\n                />\n                <img\n                  src={imagePath + upcomingMovie.poster_path}\n                  alt=\"Movie Poster\"\n                  loading=\"lazy\"\n                />\n              </StyledUpcomingImage>\n\n              <StyledUpcomingContentWrap>\n                <StyledUpcomingName>\n                  {upcomingMovie.original_title}\n                </StyledUpcomingName>\n\n                <StyledUpcomingThumb>\n                  <StyledUpcomingListLeft>\n                    <StyledUpcomingListItem>\n                      <StyledUpcomingListText>\n                        Release date\n                      </StyledUpcomingListText>\n                      <p style={{ marginLeft: '58px' }}>\n                        {upcomingMovie.release_date}\n                      </p>\n                    </StyledUpcomingListItem>\n                    <StyledUpcomingListItem>\n                      <StyledUpcomingListText>\n                        Vote / Votes\n                      </StyledUpcomingListText>\n                      <p style={{ marginLeft: '68px' }}>\n                        <span>{upcomingMovie.vote_average}</span> /{' '}\n                        <span>{upcomingMovie.vote_count}</span>\n                      </p>\n                    </StyledUpcomingListItem>\n                  </StyledUpcomingListLeft>\n\n                  <ul>\n                    <StyledUpcomingListItem>\n                      <StyledUpcomingListText>\n                        Popularity\n                      </StyledUpcomingListText>\n                      <p style={{ marginLeft: '78px' }}>\n                        {upcomingMovie.popularity}\n                      </p>\n                    </StyledUpcomingListItem>\n                    <StyledUpcomingListItem>\n                      <StyledUpcomingListText>Genre</StyledUpcomingListText>\n                      <p style={{ marginLeft: '108px' }}>\n                        Action, Science Fiction, Horror\n                      </p>\n                    </StyledUpcomingListItem>\n                  </ul>\n                </StyledUpcomingThumb>\n\n                <StyledUpcomingContentTitle>About</StyledUpcomingContentTitle>\n                <StyledUpcomingContentText>\n                  {upcomingMovie.overview}\n                </StyledUpcomingContentText>\n\n                {isInLibrary ? (\n                  <StyledUpcomingContentBtn\n                    type=\"button\"\n                    onClick={handleDelete}\n                  >\n                    Remove from library\n                  </StyledUpcomingContentBtn>\n                ) : (\n                  <StyledUpcomingContentBtn type=\"button\" onClick={handleClick}>\n                    Add to my library\n                  </StyledUpcomingContentBtn>\n                )}\n              </StyledUpcomingContentWrap>\n            </StyledUpcomingFilm>\n          </>\n        )}\n      </StyledHeroContainer>\n    </section>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport {\n  StyledCatalogContainer,\n  StyledCatalogList,\n  StyledWeeklyTrendsHeader,\n} from './WeeklyTrendsStyled';\n\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesGalleryItem } from 'components/MoviesGalleryItem/MoviesGalleryItem';\nimport { selectLoadingStatus, selectWeeklyTrendingMovies } from 'redux/selectors';\n\nconst WeeklyTrends = () => {\n  const weeklyTrendingMovies = useSelector(selectWeeklyTrendingMovies);\n  const isLoading = useSelector(selectLoadingStatus);\n\n  const [slicedWeeklyTrendingMovies, setSlicedWeeklyTrendingMovies] = useState(\n    []\n  );\n\n  useEffect(() => {\n    if (!weeklyTrendingMovies) return;\n    setSlicedWeeklyTrendingMovies(weeklyTrendingMovies.slice(0, 3));\n  }, [weeklyTrendingMovies]);\n\n  return (\n    <section>\n      <StyledCatalogContainer>\n        <StyledWeeklyTrendsHeader>\n          <h3>Weekly Trends</h3>\n          <Link to=\"/catalog\">See All</Link>\n        </StyledWeeklyTrendsHeader>\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <StyledCatalogList>\n            {slicedWeeklyTrendingMovies.map(movie => (\n              <MoviesGalleryItem key={movie.id} movie={movie} />\n            ))}\n          </StyledCatalogList>\n        )}\n      </StyledCatalogContainer>\n    </section>\n  );\n};\n\nexport default WeeklyTrends;\n","import { useEffect } from 'react';\n\nimport HomePageHero from 'components/Hero/Hero';\nimport { UpcomingMovie } from 'components/UpcomingMovie/UpcomingMovie';\nimport WeeklyTrends from 'components/WeeklyTrends/WeeklyTrends';\n\nconst Home = ({ onChangePage }) => {\n  useEffect(() => {\n    onChangePage(1);\n  }, [onChangePage]);\n\n  return (\n    <>\n      <HomePageHero />\n      <WeeklyTrends />\n      <UpcomingMovie />\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["UpcomingMovie","isLoading","useSelector","selectLoadingStatus","upcomingMovie","selectUpcomingMovie","favoriteMovies","selectFavoriteMovies","dispatch","useDispatch","useEffect","fetctUpcomingMovies","imagePath","isInLibrary","some","favoriteMovie","id","_jsx","children","_jsxs","StyledHeroContainer","Loader","_Fragment","StyledUpcomingTitle","StyledUpcomingFilm","StyledUpcomingImage","srcSet","backdrop_path","media","loading","poster_path","src","alt","StyledUpcomingContentWrap","StyledUpcomingName","original_title","StyledUpcomingThumb","StyledUpcomingListLeft","StyledUpcomingListItem","StyledUpcomingListText","style","marginLeft","release_date","vote_average","vote_count","popularity","StyledUpcomingContentTitle","StyledUpcomingContentText","overview","StyledUpcomingContentBtn","type","onClick","e","preventDefault","removeFromFavoriteMovies","data","setFavoriteMovies","weeklyTrendingMovies","selectWeeklyTrendingMovies","_useState","useState","_useState2","_slicedToArray","slicedWeeklyTrendingMovies","setSlicedWeeklyTrendingMovies","slice","StyledCatalogContainer","StyledWeeklyTrendsHeader","Link","to","StyledCatalogList","map","movie","MoviesGalleryItem","_ref","onChangePage","HomePageHero","WeeklyTrends"],"sourceRoot":""}